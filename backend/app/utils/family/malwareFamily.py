import hashlib
import pickle


class MalwareFamily:
    def __init__(self):
        pass

    @staticmethod
    def hex_to_binary(hex_string):
        """Converts a hex string to a 256-bit binary string."""
        return bin(int(hex_string, 16))[2:].zfill(256)

    @staticmethod
    def hamming_distance(hash1, hash2):
        """Calculates the Hamming distance between two SHA256 hashes."""
        binary1 = MalwareFamily.hex_to_binary(hash1)
        binary2 = MalwareFamily.hex_to_binary(hash2)
        return sum(b1 != b2 for b1, b2 in zip(binary1, binary2))

    @staticmethod
    def calculate_sha256(bytes):
        """Calculates the SHA256 hash of a byte-like object."""
        sha256_hash = hashlib.sha256()
        sha256_hash.update(bytes)
        return sha256_hash.hexdigest()

    def handler(self, bytes):
        """Handles byte data to determine its malware family."""
        sha256 = self.calculate_sha256(bytes)
        hashdb = pickle.load(open("app/models/familyhashes.pkl", "rb"))
        distances = {}
        for obj in hashdb.keys():
            distances.update({self.hamming_distance(sha256, hashdb[obj]): obj})

        min_key = min(distances.keys())
        min_key_values = [(k, v) for k, v in distances.items() if k == min_key]
        return min_key_values

    def handlerHash(self, sha256):
        """Handles a precomputed SHA256 hash to determine its malware family."""
        hashdb = pickle.load(open("app/models/familyhashes.pkl", "rb"))
        distances = {}
        for obj in hashdb.keys():
            distances.update({self.hamming_distance(sha256, hashdb[obj]): obj})

        min_key = min(distances.keys())
        min_key_values = [(k, v) for k, v in distances.items() if k == min_key]
        return min_key_values

    def getfamily(self, bytes):
        """Gets the family name from a file path."""
        result = self.handler(bytes)
        if result:
            return result[0][1]
        return "Unknown"

    def getfamily_fromHash(self, sha256):
        """Gets the family from a SHA256 hash."""
        return self.handlerHash(sha256)
